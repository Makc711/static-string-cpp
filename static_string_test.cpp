#include <iostream>
#include <limits>
#include <algorithm>
#include "static_string.h"

using namespace snw1;

int main() {
    // literal operator tests
    static_assert(""_ss.empty(), "");
    static_assert("H"_ss == "H", "");
    static_assert("Hello"_ss == "Hello", "");
    static_assert("Hello world"_ss == "Hello world", "");

    // static_length() tests
    static_assert(static_length() == 0, "");
    static_assert(static_length("") == 0, "");
    static_assert(static_length("H") == 1, "");
    static_assert(static_length("Hello") == 5, "");
    static_assert(static_length("Hello world") == 11, "");
    static_assert(static_length(""_ss) == 0, "");
    static_assert(static_length("H"_ss) == 1, "");
    static_assert(static_length("Hello"_ss) == 5, "");
    static_assert(static_length("Hello world"_ss) == 11, "");
    static_assert(static_length(0) == 1, "");
    static_assert(static_length(1) == 1, "");
    static_assert(static_length(9) == 1, "");
    static_assert(static_length(10) == 2, "");
    static_assert(static_length(11) == 2, "");
    static_assert(static_length(14) == 2, "");
    static_assert(static_length(19) == 2, "");
    static_assert(static_length(99) == 2, "");
    static_assert(static_length(873) == 3, "");
    static_assert(static_length(496850) == 6, "");
    static_assert(static_length(853104678) == 9, "");
    static_assert(static_length(2147483647) == 10, "");
    static_assert(static_length(4294967295U) == 10, "");
    static_assert(static_length(827394274920LL) == 12, "");
    static_assert(static_length(294653986395673LL) == 15, "");
    static_assert(static_length(973946584364859472LL) == 18, "");
    static_assert(static_length(9223372036854775807LL) == 19, "");
    static_assert(static_length(std::numeric_limits<long long>::max()) == 19, "");
    static_assert(static_length(-1) == 2, "");
    static_assert(static_length(-9) == 2, "");
    static_assert(static_length(-10) == 3, "");
    static_assert(static_length(-11) == 3, "");
    static_assert(static_length(-14) == 3, "");
    static_assert(static_length(-19) == 3, "");
    static_assert(static_length(-99) == 3, "");
    static_assert(static_length(-873) == 4, "");
    static_assert(static_length(-496850) == 7, "");
    static_assert(static_length(-853104678) == 10, "");
    static_assert(static_length(-2147483647) == 11, "");
    static_assert(static_length(-827394274920LL) == 13, "");
    static_assert(static_length(-294653986395673LL) == 16, "");
    static_assert(static_length(-973946584364859472LL) == 19, "");
    static_assert(static_length(-9223372036854775807LL) == 20, "");
    static_assert(static_length(std::numeric_limits<long long>::min()) == 20, "");

    // static_concat_length() tests
    static_assert(static_concat_length() == 0, "");
    static_assert(static_concat_length(""_ss) == 0, "");
    static_assert(static_concat_length("") == 0, "");
    static_assert(static_concat_length(""_ss) == 0, "");
    static_assert(static_concat_length("H"_ss) == 1, "");
    static_assert(static_concat_length("Hello") == 5, "");
    static_assert(static_concat_length("Hello"_ss, "World") == 10, "");
    static_assert(static_concat_length("Hello", -294653986395673LL, "World"_ss, 45678) == 31, "");

    // static_string sizeof() tests
    static_assert(sizeof(""_ss) == 1, "");
    static_assert(sizeof(""_ss) == 1, "");
    static_assert(sizeof("H"_ss) == 2, "");
    static_assert(sizeof("Hello"_ss) == 6, "");
    static_assert(sizeof("Hello world"_ss) == 12, "");

    // static_string_compare() tests
    static_assert(static_string_compare("", "") == 0, "");
    static_assert(static_string_compare(""_ss, "") == 0, "");
    static_assert(static_string_compare("", ""_ss) == 0, "");
    static_assert(static_string_compare(""_ss, ""_ss) == 0, "");
    static_assert(static_string_compare("", "Hello") < 0, "");
    static_assert(static_string_compare(""_ss, "Hello") < 0, "");
    static_assert(static_string_compare("", "Hello"_ss) < 0, "");
    static_assert(static_string_compare(""_ss, "Hello"_ss) < 0, "");
    static_assert(static_string_compare("Hello", "") > 0, "");
    static_assert(static_string_compare("Hello"_ss, "") > 0, "");
    static_assert(static_string_compare("Hello", ""_ss) > 0, "");
    static_assert(static_string_compare("Hello"_ss, ""_ss) > 0, "");
    static_assert(static_string_compare("Hello", "Hello") == 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hello") == 0, "");
    static_assert(static_string_compare("Hello", "Hello"_ss) == 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hello"_ss) == 0, "");
    static_assert(static_string_compare("Hell", "Hello") < 0, "");
    static_assert(static_string_compare("Hell"_ss, "Hello") < 0, "");
    static_assert(static_string_compare("Hell", "Hello"_ss) < 0, "");
    static_assert(static_string_compare("Hell"_ss, "Hello"_ss) < 0, "");
    static_assert(static_string_compare("Hello", "Hell") > 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hell") > 0, "");
    static_assert(static_string_compare("Hello", "Hell"_ss) > 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hell"_ss) > 0, "");
    static_assert(static_string_compare("Hella", "Hello") < 0, "");
    static_assert(static_string_compare("Hella"_ss, "Hello") < 0, "");
    static_assert(static_string_compare("Hella", "Hello"_ss) < 0, "");
    static_assert(static_string_compare("Hella"_ss, "Hello"_ss) < 0, "");
    static_assert(static_string_compare("Hello", "Hella") > 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hella") > 0, "");
    static_assert(static_string_compare("Hello", "Hella"_ss) > 0, "");
    static_assert(static_string_compare("Hello"_ss, "Hella"_ss) > 0, "");

    // comparison operators tests
    static_assert(""_ss == "", "");
    static_assert("" == ""_ss, "");
    static_assert(""_ss == ""_ss, "");
    static_assert(""_ss < "Hello", "");
    static_assert("" < "Hello"_ss, "");
    static_assert(""_ss < "Hello"_ss, "");
    static_assert("Hello"_ss > "", "");
    static_assert("Hello" > ""_ss, "");
    static_assert("Hello"_ss > ""_ss, "");
    static_assert("Hello"_ss == "Hello", "");
    static_assert("Hello" == "Hello"_ss, "");
    static_assert("Hello"_ss == "Hello"_ss, "");
    static_assert("Hell"_ss < "Hello", "");
    static_assert("Hell" < "Hello"_ss, "");
    static_assert("Hell"_ss < "Hello"_ss, "");
    static_assert("Hello"_ss > "Hell", "");
    static_assert("Hello" > "Hell"_ss, "");
    static_assert("Hello"_ss > "Hell"_ss, "");
    static_assert("Hella"_ss < "Hello", "");
    static_assert("Hella" < "Hello"_ss, "");
    static_assert("Hella"_ss < "Hello"_ss, "");
    static_assert("Hello"_ss > "Hella", "");
    static_assert("Hello" > "Hella"_ss, "");
    static_assert("Hello"_ss > "Hella"_ss, "");
    static_assert(""_ss != "Hello", "");
    static_assert("" != "Hello"_ss, "");
    static_assert(""_ss != "Hello"_ss, "");
    static_assert("Hello"_ss != "", "");
    static_assert("Hello" != ""_ss, "");
    static_assert("Hello"_ss != ""_ss, "");
    static_assert("Hell"_ss != "Hello", "");
    static_assert("Hell" != "Hello"_ss, "");
    static_assert("Hell"_ss != "Hello"_ss, "");
    static_assert("Hello"_ss != "Hell", "");
    static_assert("Hello" != "Hell"_ss, "");
    static_assert("Hello"_ss != "Hell"_ss, "");
    static_assert("Hella"_ss != "Hello", "");
    static_assert("Hella" != "Hello"_ss, "");
    static_assert("Hella"_ss != "Hello"_ss, "");
    static_assert("Hello"_ss != "Hella", "");
    static_assert("Hello" != "Hella"_ss, "");
    static_assert("Hello"_ss != "Hella"_ss, "");
    static_assert(""_ss <= "", "");
    static_assert("" >= ""_ss, "");
    static_assert(""_ss <= ""_ss, "");
    static_assert(""_ss <= "Hello", "");
    static_assert("" <= "Hello"_ss, "");
    static_assert(""_ss <= "Hello"_ss, "");
    static_assert("Hello"_ss >= "", "");
    static_assert("Hello" >= ""_ss, "");
    static_assert("Hello"_ss >= ""_ss, "");
    static_assert("Hello"_ss <= "Hello", "");
    static_assert("Hello" >= "Hello"_ss, "");
    static_assert("Hello"_ss <= "Hello"_ss, "");
    static_assert("Hell"_ss <= "Hello", "");
    static_assert("Hell" <= "Hello"_ss, "");
    static_assert("Hell"_ss <= "Hello"_ss, "");
    static_assert("Hello"_ss >= "Hell", "");
    static_assert("Hello" >= "Hell"_ss, "");
    static_assert("Hello"_ss >= "Hell"_ss, "");
    static_assert("Hella"_ss <= "Hello", "");
    static_assert("Hella" <= "Hello"_ss, "");
    static_assert("Hella"_ss <= "Hello"_ss, "");
    static_assert("Hello"_ss >= "Hella", "");
    static_assert("Hello" >= "Hella"_ss, "");
    static_assert("Hello"_ss >= "Hella"_ss, "");

    // static_string_concat() tests
    static_assert(static_string::concat() == "", "");
    static_assert(static_string::concat("") == "", "");
    static_assert(static_string::concat("", "") == "", "");
    static_assert(static_string::concat("", "", "") == "", "");
    static_assert(static_string::concat("", ""_ss, "") == "", "");
    static_assert(static_string::concat(""_ss, "", ""_ss) == "", "");
    static_assert(static_string::concat(""_ss, ""_ss, ""_ss) == "", "");
    static_assert(static_string::concat("Hello") == "Hello", "");
    static_assert(static_string::concat("", "Hello") == "Hello", "");
    static_assert(static_string::concat("", "Hello", "") == "Hello", "");
    static_assert(static_string::concat("", "Hello"_ss, "") == "Hello", "");
    static_assert(static_string::concat(""_ss, "", "Hello"_ss) == "Hello", "");
    static_assert(static_string::concat("Hello"_ss, ""_ss, ""_ss) == "Hello", "");
    static_assert(static_string::concat("Hello", "World") == "HelloWorld", "");
    static_assert(static_string::concat("Hello"_ss, "World") == "HelloWorld", "");
    static_assert(static_string::concat("Hello", "World"_ss) == "HelloWorld", "");
    static_assert(static_string::concat("Hello"_ss, "World"_ss) == "HelloWorld", "");
    static_assert(static_string::concat("Hello", ", ", "World", "!") == "Hello, World!", "");
    static_assert(static_string::concat("Hello"_ss, ", ", "World"_ss, "!") == "Hello, World!", "");
    static_assert(static_string::concat("Hello"_ss, ", "_ss, "World"_ss, "!"_ss) == "Hello, World!", "");

    // concatenation operator tests
    static_assert("Hello"_ss + "World" == "HelloWorld", "");
    static_assert("Hello" + "World"_ss == "HelloWorld", "");
    static_assert("Hello"_ss + "World"_ss == "HelloWorld", "");
    static_assert("Hello"_ss + ", " + "World"_ss + "!" == "Hello, World!", "");

    // static_string_reverse() tests
    static_assert(static_string_reverse("") == "", "");
    static_assert(static_string_reverse("H") == "H", "");
    static_assert(static_string_reverse("Hello") == "olleH", "");
    static_assert(static_string_reverse("Hello world") == "dlrow olleH", "");
    static_assert(static_string_reverse(""_ss) == "", "");
    static_assert(static_string_reverse("H"_ss) == "H", "");
    static_assert(static_string_reverse("Hello"_ss) == "olleH", "");
    static_assert(static_string_reverse("Hello world"_ss) == "dlrow olleH", "");

    // static_string_substring() tests
    static_assert(static_string_substring<0, 0>("") == "", "");
    static_assert(static_string_substring<0, 0>("H") == "", "");
    static_assert(static_string_substring<1, 1>("H") == "", "");
    static_assert(static_string_substring<0, 1>("H") == "H", "");
    static_assert(static_string_substring<0, 5>("Hello") == "Hello", "");
    static_assert(static_string_substring<3, 3>("Hello") == "", "");
    static_assert(static_string_substring<1, 5>("Hello") == "ello", "");
    static_assert(static_string_substring<0, 4>("Hello") == "Hell", "");
    static_assert(static_string_substring<2, 5>("Hello") == "llo", "");
    static_assert(static_string_substring<3, 4>("Hello") == "l", "");
    static_assert(static_string_substring<2, 4>("Hello") == "ll", "");
    static_assert(static_string_substring<1, 4>("Hello") == "ell", "");
    static_assert(static_string_substring<0, 0>(""_ss) == "", "");
    static_assert(static_string_substring<0, 0>("H"_ss) == "", "");
    static_assert(static_string_substring<1, 1>("H"_ss) == "", "");
    static_assert(static_string_substring<0, 1>("H"_ss) == "H", "");
    static_assert(static_string_substring<0, 5>("Hello"_ss) == "Hello", "");
    static_assert(static_string_substring<3, 3>("Hello"_ss) == "", "");
    static_assert(static_string_substring<1, 5>("Hello"_ss) == "ello", "");
    static_assert(static_string_substring<0, 4>("Hello"_ss) == "Hell", "");
    static_assert(static_string_substring<2, 5>("Hello"_ss) == "llo", "");
    static_assert(static_string_substring<3, 4>("Hello"_ss) == "l", "");
    static_assert(static_string_substring<2, 4>("Hello"_ss) == "ll", "");
    static_assert(static_string_substring<1, 4>("Hello"_ss) == "ell", "");

    // static_string_prefix() tests
    static_assert(static_string_prefix<0>("") == "", "");
    static_assert(static_string_prefix<0>("Hello") == "", "");
    static_assert(static_string_prefix<1>("Hello") == "H", "");
    static_assert(static_string_prefix<2>("Hello") == "He", "");
    static_assert(static_string_prefix<3>("Hello") == "Hel", "");
    static_assert(static_string_prefix<4>("Hello") == "Hell", "");
    static_assert(static_string_prefix<5>("Hello") == "Hello", "");
    static_assert(static_string_prefix<0>(""_ss) == "", "");
    static_assert(static_string_prefix<0>("Hello"_ss) == "", "");
    static_assert(static_string_prefix<1>("Hello"_ss) == "H", "");
    static_assert(static_string_prefix<2>("Hello"_ss) == "He", "");
    static_assert(static_string_prefix<3>("Hello"_ss) == "Hel", "");
    static_assert(static_string_prefix<4>("Hello"_ss) == "Hell", "");
    static_assert(static_string_prefix<5>("Hello"_ss) == "Hello", "");

    // static_string_prefix() tests
    static_assert(static_string_suffix<0>("") == "", "");
    static_assert(static_string_suffix<0>("Hello") == "Hello", "");
    static_assert(static_string_suffix<1>("Hello") == "ello", "");
    static_assert(static_string_suffix<2>("Hello") == "llo", "");
    static_assert(static_string_suffix<3>("Hello") == "lo", "");
    static_assert(static_string_suffix<4>("Hello") == "o", "");
    static_assert(static_string_suffix<5>("Hello") == "", "");
    static_assert(static_string_suffix<0>(""_ss) == "", "");
    static_assert(static_string_suffix<0>("Hello"_ss) == "Hello", "");
    static_assert(static_string_suffix<1>("Hello"_ss) == "ello", "");
    static_assert(static_string_suffix<2>("Hello"_ss) == "llo", "");
    static_assert(static_string_suffix<3>("Hello"_ss) == "lo", "");
    static_assert(static_string_suffix<4>("Hello"_ss) == "o", "");
    static_assert(static_string_suffix<5>("Hello"_ss) == "", "");

    // static_string_find(ch) tests
    static_assert(static_string_find("", 'a') == static_string_npos, "");
    static_assert(static_string_find("a", 'a') == 0, "");
    static_assert(static_string_find("b", 'a') == static_string_npos, "");
    static_assert(static_string_find("abcabca", 'a') == 0, "");
    static_assert(static_string_find("abcabca", 'a', 1) == 3, "");
    static_assert(static_string_find("abcabca", 'a', 4) == 6, "");
    static_assert(static_string_find("abcabca", 'a', 7) == static_string_npos, "");
    static_assert(static_string_find("abcabca", 'a', 1'000'000) == static_string_npos, "");
    static_assert(static_string_find("abcabca", 'a', 0, 0) == 0, "");
    static_assert(static_string_find("abcabca", 'a', 0, 1) == 3, "");
    static_assert(static_string_find("abcabca", 'a', 0, 2) == 6, "");
    static_assert(static_string_find("abcabca", 'a', 0, 3) == static_string_npos, "");
    static_assert(static_string_find("abcabca", 'a', 0, 1'000'000) == static_string_npos, "");
    static_assert(static_string_find(""_ss, 'a') == static_string_npos, "");
    static_assert(static_string_find("a"_ss, 'a') == 0, "");
    static_assert(static_string_find("b"_ss, 'a') == static_string_npos, "");
    static_assert(static_string_find("abcabca"_ss, 'a') == 0, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 1) == 3, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 4) == 6, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 7) == static_string_npos, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 1'000'000) == static_string_npos, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 0, 0) == 0, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 0, 1) == 3, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 0, 2) == 6, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 0, 3) == static_string_npos, "");
    static_assert(static_string_find("abcabca"_ss, 'a', 0, 1'000'000) == static_string_npos, "");

    // static_string_rfind(ch) tests
    static_assert(static_string_rfind("", 'c') == static_string_npos, "");
    static_assert(static_string_rfind("c", 'c') == 0, "");
    static_assert(static_string_rfind("b", 'c') == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc", 'c') == 6, "");
    static_assert(static_string_rfind("cabcabc", 'c', 5) == 3, "");
    static_assert(static_string_rfind("cabcabc", 'c', 2) == 0, "");
    static_assert(static_string_rfind("cabcabc", 'c', -1) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc", 'c', 1'000'000) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc", 'c', 6, 0) == 6, "");
    static_assert(static_string_rfind("cabcabc", 'c', 6, 1) == 3, "");
    static_assert(static_string_rfind("cabcabc", 'c', 6, 2) == 0, "");
    static_assert(static_string_rfind("cabcabc", 'c', 6, 3) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc", 'c', 6, 1'000'000) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, 'c') == static_string_npos, "");
    static_assert(static_string_rfind("c"_ss, 'c') == 0, "");
    static_assert(static_string_rfind("b"_ss, 'c') == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c') == 6, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 5) == 3, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 2) == 0, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', -1) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 1'000'000) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 6, 0) == 6, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 6, 1) == 3, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 6, 2) == 0, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 6, 3) == static_string_npos, "");
    static_assert(static_string_rfind("cabcabc"_ss, 'c', 6, 1'000'000) == static_string_npos, "");

    // static_string_find(str) tests
    static_assert(static_string_find("", "") == 0, "");
    static_assert(static_string_find("", "", 1) == static_string_npos, "");
    static_assert(static_string_find("", "", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a", "") == 0, "");
    static_assert(static_string_find("a", "", 1) == 1, "");
    static_assert(static_string_find("a", "", 0, 1) == 1, "");
    static_assert(static_string_find("", "a") == static_string_npos, "");
    static_assert(static_string_find("", "a", 1) == static_string_npos, "");
    static_assert(static_string_find("", "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a", "a") == 0, "");
    static_assert(static_string_find("a", "a", 1) == static_string_npos, "");
    static_assert(static_string_find("a", "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aa") == 0, "");
    static_assert(static_string_find("aaaaa", "aa", 1) == 1, "");
    static_assert(static_string_find("aaaaa", "aa", 2) == 2, "");
    static_assert(static_string_find("aaaaa", "aa", 3) == 3, "");
    static_assert(static_string_find("aaaaa", "aa", 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aa", 0, 1) == 1, "");
    static_assert(static_string_find("aaaaa", "aa", 0, 2) == 2, "");
    static_assert(static_string_find("aaaaa", "aa", 0, 3) == 3, "");
    static_assert(static_string_find("aaaaa", "aa", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aaaaa") == 0, "");
    static_assert(static_string_find("ababababa", "ba") == 1, "");
    static_assert(static_string_find("ababababa", "ba", 2) == 3, "");
    static_assert(static_string_find("ababababa", "ba", 4) == 5, "");
    static_assert(static_string_find("ababababa", "ba", 6) == 7, "");
    static_assert(static_string_find("ababababa", "ba", 8) == static_string_npos, "");
    static_assert(static_string_find("ababababa", "ba", 0, 1) == 3, "");
    static_assert(static_string_find("ababababa", "ba", 0, 2) == 5, "");
    static_assert(static_string_find("ababababa", "ba", 0, 3) == 7, "");
    static_assert(static_string_find("ababababa", "ba", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ababababa", "ababababa") == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac") == 2, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 3) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 7) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 11) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 38) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 0, 1) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 0, 2) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 0, 3) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb") == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb", 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc") == 58, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc", 59) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc", 0, 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, "") == 0, "");
    static_assert(static_string_find(""_ss, "", 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, "", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, "") == 0, "");
    static_assert(static_string_find("a"_ss, "", 1) == 1, "");
    static_assert(static_string_find("a"_ss, "", 0, 1) == 1, "");
    static_assert(static_string_find(""_ss, "a") == static_string_npos, "");
    static_assert(static_string_find(""_ss, "a", 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, "a") == 0, "");
    static_assert(static_string_find("a"_ss, "a", 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aa") == 0, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 1) == 1, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 2) == 2, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 3) == 3, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 0, 1) == 1, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 0, 2) == 2, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 0, 3) == 3, "");
    static_assert(static_string_find("aaaaa"_ss, "aa", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aaaaa") == 0, "");
    static_assert(static_string_find("ababababa"_ss, "ba") == 1, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 2) == 3, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 4) == 5, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 6) == 7, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 8) == static_string_npos, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 0, 1) == 3, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 0, 2) == 5, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 0, 3) == 7, "");
    static_assert(static_string_find("ababababa"_ss, "ba", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ababababa"_ss, "ababababa") == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac") == 2, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 3) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 7) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 11) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 38) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 0, 1) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 0, 2) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 0, 3) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb") == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb", 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc") == 58, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc", 59) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc", 0, 1) == static_string_npos, "");
    static_assert(static_string_find("", ""_ss) == 0, "");
    static_assert(static_string_find("", ""_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("", ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a", ""_ss) == 0, "");
    static_assert(static_string_find("a", ""_ss, 1) == 1, "");
    static_assert(static_string_find("a", ""_ss, 0, 1) == 1, "");
    static_assert(static_string_find("", "a"_ss) == static_string_npos, "");
    static_assert(static_string_find("", "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("", "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a", "a"_ss) == 0, "");
    static_assert(static_string_find("a", "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("a", "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aa"_ss) == 0, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 1) == 1, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 2) == 2, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 3) == 3, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 0, 1) == 1, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 0, 2) == 2, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 0, 3) == 3, "");
    static_assert(static_string_find("aaaaa", "aa"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa", "aaaaa"_ss) == 0, "");
    static_assert(static_string_find("ababababa", "ba"_ss) == 1, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 2) == 3, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 4) == 5, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 6) == 7, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 8) == static_string_npos, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 0, 1) == 3, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 0, 2) == 5, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 0, 3) == 7, "");
    static_assert(static_string_find("ababababa", "ba"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ababababa", "ababababa"_ss) == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss) == 2, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 3) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 7) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 11) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 38) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 0, 1) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 0, 2) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 0, 3) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss) == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss) == 58, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss, 59) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, ""_ss) == 0, "");
    static_assert(static_string_find(""_ss, ""_ss, 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, ""_ss) == 0, "");
    static_assert(static_string_find("a"_ss, ""_ss, 1) == 1, "");
    static_assert(static_string_find("a"_ss, ""_ss, 0, 1) == 1, "");
    static_assert(static_string_find(""_ss, "a"_ss) == static_string_npos, "");
    static_assert(static_string_find(""_ss, "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find(""_ss, "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, "a"_ss) == 0, "");
    static_assert(static_string_find("a"_ss, "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("a"_ss, "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss) == 0, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 1) == 1, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 2) == 2, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 3) == 3, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 0, 1) == 1, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 0, 2) == 2, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 0, 3) == 3, "");
    static_assert(static_string_find("aaaaa"_ss, "aa"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("aaaaa"_ss, "aaaaa"_ss) == 0, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss) == 1, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 2) == 3, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 4) == 5, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 6) == 7, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 8) == static_string_npos, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 0, 1) == 3, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 0, 2) == 5, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 0, 3) == 7, "");
    static_assert(static_string_find("ababababa"_ss, "ba"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ababababa"_ss, "ababababa"_ss) == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss) == 2, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 3) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 7) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 11) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 38) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 0, 1) == 6, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 0, 2) == 10, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 0, 3) == 37, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 0, 4) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss) == 0, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss) == 58, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss, 59) == static_string_npos, "");
    static_assert(static_string_find("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss, 0, 1) == static_string_npos, "");

    // static_string_rfind(str) tests
    static_assert(static_string_rfind("", "") == 0, "");
    static_assert(static_string_rfind("", "", 1) == static_string_npos, "");
    static_assert(static_string_rfind("", "", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", "") == 1, "");
    static_assert(static_string_rfind("a", "", 1) == 1, "");
    static_assert(static_string_rfind("a", "", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("", "a") == static_string_npos, "");
    static_assert(static_string_rfind("", "a", 1) == static_string_npos, "");
    static_assert(static_string_rfind("", "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", "a") == 0, "");
    static_assert(static_string_rfind("a", "a", 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aa") == 3, "");
    static_assert(static_string_rfind("aaaaa", "aa", 2) == 2, "");
    static_assert(static_string_rfind("aaaaa", "aa", 1) == 1, "");
    static_assert(static_string_rfind("aaaaa", "aa", 0) == 0, "");
    static_assert(static_string_rfind("aaaaa", "aa", -1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aa", 3, 1) == 2, "");
    static_assert(static_string_rfind("aaaaa", "aa", 3, 2) == 1, "");
    static_assert(static_string_rfind("aaaaa", "aa", 3, 3) == 0, "");
    static_assert(static_string_rfind("aaaaa", "aa", 3, 4) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aaaaa") == 0, "");
    static_assert(static_string_rfind("ababababa", "ba") == 7, "");
    static_assert(static_string_rfind("ababababa", "ba", 6) == 5, "");
    static_assert(static_string_rfind("ababababa", "ba", 4) == 3, "");
    static_assert(static_string_rfind("ababababa", "ba", 2) == 1, "");
    static_assert(static_string_rfind("ababababa", "ba", 0) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa", "ba", 7, 1) == 5, "");
    static_assert(static_string_rfind("ababababa", "ba", 7, 2) == 3, "");
    static_assert(static_string_rfind("ababababa", "ba", 7, 3) == 1, "");
    static_assert(static_string_rfind("ababababa", "ba", 7, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa", "ababababa") == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac") == 37, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 36) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 9) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 5) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 58, 1) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 58, 2) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 58, 3) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac", 58, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb") == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb", -1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb", 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc") == 58, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc", 57) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc", 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "") == 0, "");
    static_assert(static_string_rfind(""_ss, "", 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, "") == 1, "");
    static_assert(static_string_rfind("a"_ss, "", 1) == 1, "");
    static_assert(static_string_rfind("a"_ss, "", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a") == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a", 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, "a") == 0, "");
    static_assert(static_string_rfind("a"_ss, "a", 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, "a", 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa") == 3, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 2) == 2, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 1) == 1, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 0) == 0, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", -1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 3, 1) == 2, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 3, 2) == 1, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 3, 3) == 0, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa", 3, 4) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aaaaa") == 0, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba") == 7, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 6) == 5, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 4) == 3, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 2) == 1, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 0) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 7, 1) == 5, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 7, 2) == 3, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 7, 3) == 1, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba", 7, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa"_ss, "ababababa") == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac") == 37, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 36) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 9) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 5) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 58, 1) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 58, 2) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 58, 3) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac", 58, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb") == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb", -1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb", 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc") == 58, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc", 57) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc", 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind("", ""_ss) == 0, "");
    static_assert(static_string_rfind("", ""_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("", ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", ""_ss) == 1, "");
    static_assert(static_string_rfind("a", ""_ss, 1) == 1, "");
    static_assert(static_string_rfind("a", ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("", "a"_ss) == static_string_npos, "");
    static_assert(static_string_rfind("", "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("", "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", "a"_ss) == 0, "");
    static_assert(static_string_rfind("a", "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a", "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss) == 3, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 2) == 2, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 1) == 1, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 0) == 0, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, -1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 3, 1) == 2, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 3, 2) == 1, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 3, 3) == 0, "");
    static_assert(static_string_rfind("aaaaa", "aa"_ss, 3, 4) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa", "aaaaa"_ss) == 0, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss) == 7, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 6) == 5, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 4) == 3, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 2) == 1, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 0) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 7, 1) == 5, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 7, 2) == 3, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 7, 3) == 1, "");
    static_assert(static_string_rfind("ababababa", "ba"_ss, 7, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa", "ababababa"_ss) == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss) == 37, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 36) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 9) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 5) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 58, 1) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 58, 2) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 58, 3) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bac"_ss, 58, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss) == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss, -1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "ccb"_ss, 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss) == 58, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss, 57) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", "bdc"_ss, 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, ""_ss) == 0, "");
    static_assert(static_string_rfind(""_ss, ""_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, ""_ss) == 1, "");
    static_assert(static_string_rfind("a"_ss, ""_ss, 1) == 1, "");
    static_assert(static_string_rfind("a"_ss, ""_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a"_ss) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind(""_ss, "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, "a"_ss) == 0, "");
    static_assert(static_string_rfind("a"_ss, "a"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("a"_ss, "a"_ss, 0, 1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss) == 3, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 2) == 2, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 1) == 1, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 0) == 0, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, -1) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 3, 1) == 2, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 3, 2) == 1, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 3, 3) == 0, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aa"_ss, 3, 4) == static_string_npos, "");
    static_assert(static_string_rfind("aaaaa"_ss, "aaaaa"_ss) == 0, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss) == 7, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 6) == 5, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 4) == 3, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 2) == 1, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 0) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 7, 1) == 5, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 7, 2) == 3, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 7, 3) == 1, "");
    static_assert(static_string_rfind("ababababa"_ss, "ba"_ss, 7, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ababababa"_ss, "ababababa"_ss) == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss) == 37, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 36) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 9) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 5) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 58, 1) == 10, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 58, 2) == 6, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 58, 3) == 2, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bac"_ss, 58, 4) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss) == 0, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss, -1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "ccb"_ss, 58, 1) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss) == 58, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss, 57) == static_string_npos, "");
    static_assert(static_string_rfind("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, "bdc"_ss, 58, 1) == static_string_npos, "");

    // static_string_contains(ch) tests
    static_assert(!static_string_contains("", 'a'), "");
    static_assert(static_string_contains("a", 'a'), "");
    static_assert(!static_string_contains("a", 'b'), "");
    static_assert(static_string_contains("cabcabc", 'a'), "");
    static_assert(static_string_contains("cabcabc", 'b'), "");
    static_assert(static_string_contains("cabcabc", 'c'), "");
    static_assert(!static_string_contains("cabcabc", 'e'), "");
    static_assert(!static_string_contains("cabcabc", 'f'), "");
    static_assert(!static_string_contains("cabcabc", 'g'), "");
    static_assert(!static_string_contains(""_ss, 'a'), "");
    static_assert(static_string_contains("a"_ss, 'a'), "");
    static_assert(!static_string_contains("a"_ss, 'b'), "");
    static_assert(static_string_contains("cabcabc"_ss, 'a'), "");
    static_assert(static_string_contains("cabcabc"_ss, 'b'), "");
    static_assert(static_string_contains("cabcabc"_ss, 'c'), "");
    static_assert(!static_string_contains("cabcabc"_ss, 'e'), "");
    static_assert(!static_string_contains("cabcabc"_ss, 'f'), "");
    static_assert(!static_string_contains("cabcabc"_ss, 'g'), "");

    // static_string_contains(str) tests
    static_assert(static_string_contains("", ""), "");
    static_assert(static_string_contains("a", ""), "");
    static_assert(!static_string_contains("", "a"), "");
    static_assert(static_string_contains("a", "a"), "");
    static_assert(!static_string_contains("a", "b"), "");
    static_assert(static_string_contains("cabcabc", "cab"), "");
    static_assert(static_string_contains("cabcabc", "bca"), "");
    static_assert(static_string_contains("cabcabc", "abc"), "");
    static_assert(!static_string_contains("cabcabc", "cba"), "");
    static_assert(!static_string_contains("cabcabc", "aca"), "");
    static_assert(!static_string_contains("cabcabc", "abb"), "");
    static_assert(static_string_contains("cabcabc", "cabcabc"), "");
    static_assert(!static_string_contains("cabcabc", "cabcabca"), "");
    static_assert(!static_string_contains("cabcabc", "acabcabc"), "");
    static_assert(static_string_contains(""_ss, ""), "");
    static_assert(static_string_contains("a"_ss, ""), "");
    static_assert(!static_string_contains(""_ss, "a"), "");
    static_assert(static_string_contains("a"_ss, "a"), "");
    static_assert(!static_string_contains("a"_ss, "b"), "");
    static_assert(static_string_contains("cabcabc"_ss, "cab"), "");
    static_assert(static_string_contains("cabcabc"_ss, "bca"), "");
    static_assert(static_string_contains("cabcabc"_ss, "abc"), "");
    static_assert(!static_string_contains("cabcabc"_ss, "cba"), "");
    static_assert(!static_string_contains("cabcabc"_ss, "aca"), "");
    static_assert(!static_string_contains("cabcabc"_ss, "abb"), "");
    static_assert(static_string_contains("cabcabc"_ss, "cabcabc"), "");
    static_assert(!static_string_contains("cabcabc"_ss, "cabcabca"), "");
    static_assert(!static_string_contains("cabcabc"_ss, "acabcabc"), "");
    static_assert(static_string_contains("", ""_ss), "");
    static_assert(static_string_contains("a", ""_ss), "");
    static_assert(!static_string_contains("", "a"_ss), "");
    static_assert(static_string_contains("a", "a"_ss), "");
    static_assert(!static_string_contains("a", "b"_ss), "");
    static_assert(static_string_contains("cabcabc", "cab"_ss), "");
    static_assert(static_string_contains("cabcabc", "bca"_ss), "");
    static_assert(static_string_contains("cabcabc", "abc"_ss), "");
    static_assert(!static_string_contains("cabcabc", "cba"_ss), "");
    static_assert(!static_string_contains("cabcabc", "aca"_ss), "");
    static_assert(!static_string_contains("cabcabc", "abb"_ss), "");
    static_assert(static_string_contains("cabcabc", "cabcabc"_ss), "");
    static_assert(!static_string_contains("cabcabc", "cabcabca"_ss), "");
    static_assert(!static_string_contains("cabcabc", "acabcabc"_ss), "");
    static_assert(static_string_contains(""_ss, ""_ss), "");
    static_assert(static_string_contains("a"_ss, ""_ss), "");
    static_assert(!static_string_contains(""_ss, "a"_ss), "");
    static_assert(static_string_contains("a"_ss, "a"_ss), "");
    static_assert(!static_string_contains("a"_ss, "b"_ss), "");
    static_assert(static_string_contains("cabcabc"_ss, "cab"_ss), "");
    static_assert(static_string_contains("cabcabc"_ss, "bca"_ss), "");
    static_assert(static_string_contains("cabcabc"_ss, "abc"_ss), "");
    static_assert(!static_string_contains("cabcabc"_ss, "cba"_ss), "");
    static_assert(!static_string_contains("cabcabc"_ss, "aca"_ss), "");
    static_assert(!static_string_contains("cabcabc"_ss, "abb"_ss), "");
    static_assert(static_string_contains("cabcabc"_ss, "cabcabc"_ss), "");
    static_assert(!static_string_contains("cabcabc"_ss, "cabcabca"_ss), "");
    static_assert(!static_string_contains("cabcabc"_ss, "acabcabc"_ss), "");

    // static_string_count() tests
    static_assert(static_string_count("", 'a') == 0, "");
    static_assert(static_string_count("cdbcbdcbdcb", 'a') == 0, "");
    static_assert(static_string_count("a", 'a') == 1, "");
    static_assert(static_string_count("aa", 'a') == 2, "");
    static_assert(static_string_count("abcd", 'a') == 1, "");
    static_assert(static_string_count("abcd", 'b') == 1, "");
    static_assert(static_string_count("abcd", 'c') == 1, "");
    static_assert(static_string_count("abcd", 'd') == 1, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", 'a') == 15, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", 'b') == 13, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", 'c') == 17, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc", 'd') == 16, "");
    static_assert(static_string_count(""_ss, 'a') == 0, "");
    static_assert(static_string_count("cdbcbdcbdcb"_ss, 'a') == 0, "");
    static_assert(static_string_count("a"_ss, 'a') == 1, "");
    static_assert(static_string_count("aa"_ss, 'a') == 2, "");
    static_assert(static_string_count("abcd"_ss, 'a') == 1, "");
    static_assert(static_string_count("abcd"_ss, 'b') == 1, "");
    static_assert(static_string_count("abcd"_ss, 'c') == 1, "");
    static_assert(static_string_count("abcd"_ss, 'd') == 1, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, 'a') == 15, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, 'b') == 13, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, 'c') == 17, "");
    static_assert(static_string_count("ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss, 'd') == 16, "");

    // static_string_starts_with() tests
    static_assert(static_string_starts_with("", ""), "");
    static_assert(static_string_starts_with("a", ""), "");
    static_assert(!static_string_starts_with("", "a"), "");
    static_assert(static_string_starts_with("a", "a"), "");
    static_assert(!static_string_starts_with("a", "b"), "");
    static_assert(!static_string_starts_with("a", "ab"), "");
    static_assert(static_string_starts_with("abcabca", ""), "");
    static_assert(static_string_starts_with("abcabca", "a"), "");
    static_assert(static_string_starts_with("abcabca", "ab"), "");
    static_assert(static_string_starts_with("abcabca", "abc"), "");
    static_assert(static_string_starts_with("abcabca", "abca"), "");
    static_assert(static_string_starts_with("abcabca", "abcab"), "");
    static_assert(static_string_starts_with("abcabca", "abcabc"), "");
    static_assert(static_string_starts_with("abcabca", "abcabca"), "");
    static_assert(!static_string_starts_with("abcabca", "abcabcab"), "");
    static_assert(!static_string_starts_with("abcabca", "bcabca"), "");
    static_assert(!static_string_starts_with("abcabca", "acabca"), "");
    static_assert(!static_string_starts_with("abcabca", "abcaba"), "");
    static_assert(static_string_starts_with(""_ss, ""), "");
    static_assert(static_string_starts_with("a"_ss, ""), "");
    static_assert(!static_string_starts_with(""_ss, "a"), "");
    static_assert(static_string_starts_with("a"_ss, "a"), "");
    static_assert(!static_string_starts_with("a"_ss, "b"), "");
    static_assert(!static_string_starts_with("a"_ss, "ab"), "");
    static_assert(static_string_starts_with("abcabca"_ss, ""), "");
    static_assert(static_string_starts_with("abcabca"_ss, "a"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "ab"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abc"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abca"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcab"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcabc"), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcabca"), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "abcabcab"), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "bcabca"), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "acabca"), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "abcaba"), "");
    static_assert(static_string_starts_with("", ""_ss), "");
    static_assert(static_string_starts_with("a", ""_ss), "");
    static_assert(!static_string_starts_with("", "a"_ss), "");
    static_assert(static_string_starts_with("a", "a"_ss), "");
    static_assert(!static_string_starts_with("a", "b"_ss), "");
    static_assert(!static_string_starts_with("a", "ab"_ss), "");
    static_assert(static_string_starts_with("abcabca", ""_ss), "");
    static_assert(static_string_starts_with("abcabca", "a"_ss), "");
    static_assert(static_string_starts_with("abcabca", "ab"_ss), "");
    static_assert(static_string_starts_with("abcabca", "abc"_ss), "");
    static_assert(static_string_starts_with("abcabca", "abca"_ss), "");
    static_assert(static_string_starts_with("abcabca", "abcab"_ss), "");
    static_assert(static_string_starts_with("abcabca", "abcabc"_ss), "");
    static_assert(static_string_starts_with("abcabca", "abcabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca", "abcabcab"_ss), "");
    static_assert(!static_string_starts_with("abcabca", "bcabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca", "acabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca", "abcaba"_ss), "");
    static_assert(static_string_starts_with(""_ss, ""_ss), "");
    static_assert(static_string_starts_with("a"_ss, ""_ss), "");
    static_assert(!static_string_starts_with(""_ss, "a"_ss), "");
    static_assert(static_string_starts_with("a"_ss, "a"_ss), "");
    static_assert(!static_string_starts_with("a"_ss, "b"_ss), "");
    static_assert(!static_string_starts_with("a"_ss, "ab"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, ""_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "a"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "ab"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abc"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abca"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcab"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcabc"_ss), "");
    static_assert(static_string_starts_with("abcabca"_ss, "abcabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "abcabcab"_ss), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "bcabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "acabca"_ss), "");
    static_assert(!static_string_starts_with("abcabca"_ss, "abcaba"_ss), "");

    // static_string_ends_with() tests
    static_assert(static_string_ends_with("", ""), "");
    static_assert(static_string_ends_with("a", ""), "");
    static_assert(!static_string_ends_with("", "a"), "");
    static_assert(static_string_ends_with("a", "a"), "");
    static_assert(!static_string_ends_with("a", "b"), "");
    static_assert(!static_string_ends_with("a", "ba"), "");
    static_assert(static_string_ends_with("abcabca", ""), "");
    static_assert(static_string_ends_with("abcabca", "a"), "");
    static_assert(static_string_ends_with("abcabca", "ca"), "");
    static_assert(static_string_ends_with("abcabca", "bca"), "");
    static_assert(static_string_ends_with("abcabca", "abca"), "");
    static_assert(static_string_ends_with("abcabca", "cabca"), "");
    static_assert(static_string_ends_with("abcabca", "bcabca"), "");
    static_assert(static_string_ends_with("abcabca", "abcabca"), "");
    static_assert(!static_string_ends_with("abcabca", "babcabca"), "");
    static_assert(!static_string_ends_with("abcabca", "abcabc"), "");
    static_assert(!static_string_ends_with("abcabca", "abcaba"), "");
    static_assert(!static_string_ends_with("abcabca", "acabca"), "");
    static_assert(static_string_ends_with(""_ss, ""), "");
    static_assert(static_string_ends_with("a"_ss, ""), "");
    static_assert(!static_string_ends_with(""_ss, "a"), "");
    static_assert(static_string_ends_with("a"_ss, "a"), "");
    static_assert(!static_string_ends_with("a"_ss, "b"), "");
    static_assert(!static_string_ends_with("a"_ss, "ba"), "");
    static_assert(static_string_ends_with("abcabca"_ss, ""), "");
    static_assert(static_string_ends_with("abcabca"_ss, "a"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "ca"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "bca"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "abca"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "cabca"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "bcabca"), "");
    static_assert(static_string_ends_with("abcabca"_ss, "abcabca"), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "babcabca"), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "abcabc"), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "abcaba"), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "acabca"), "");
    static_assert(static_string_ends_with("", ""_ss), "");
    static_assert(static_string_ends_with("a", ""_ss), "");
    static_assert(!static_string_ends_with("", "a"_ss), "");
    static_assert(static_string_ends_with("a", "a"_ss), "");
    static_assert(!static_string_ends_with("a", "b"_ss), "");
    static_assert(!static_string_ends_with("a", "ba"_ss), "");
    static_assert(static_string_ends_with("abcabca", ""_ss), "");
    static_assert(static_string_ends_with("abcabca", "a"_ss), "");
    static_assert(static_string_ends_with("abcabca", "ca"_ss), "");
    static_assert(static_string_ends_with("abcabca", "bca"_ss), "");
    static_assert(static_string_ends_with("abcabca", "abca"_ss), "");
    static_assert(static_string_ends_with("abcabca", "cabca"_ss), "");
    static_assert(static_string_ends_with("abcabca", "bcabca"_ss), "");
    static_assert(static_string_ends_with("abcabca", "abcabca"_ss), "");
    static_assert(!static_string_ends_with("abcabca", "babcabca"_ss), "");
    static_assert(!static_string_ends_with("abcabca", "abcabc"_ss), "");
    static_assert(!static_string_ends_with("abcabca", "abcaba"_ss), "");
    static_assert(!static_string_ends_with("abcabca", "acabca"_ss), "");
    static_assert(static_string_ends_with(""_ss, ""_ss), "");
    static_assert(static_string_ends_with("a"_ss, ""_ss), "");
    static_assert(!static_string_ends_with(""_ss, "a"_ss), "");
    static_assert(static_string_ends_with("a"_ss, "a"_ss), "");
    static_assert(!static_string_ends_with("a"_ss, "b"_ss), "");
    static_assert(!static_string_ends_with("a"_ss, "ba"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, ""_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "a"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "ca"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "bca"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "abca"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "cabca"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "bcabca"_ss), "");
    static_assert(static_string_ends_with("abcabca"_ss, "abcabca"_ss), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "babcabca"_ss), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "abcabc"_ss), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "abcaba"_ss), "");
    static_assert(!static_string_ends_with("abcabca"_ss, "acabca"_ss), "");

    // static_string_split() tests
    constexpr auto ss7 = "abracadabra"_ss;
    static_assert(ss7.split<5>() == std::make_pair("abrac"_ss, "dabra"_ss), "");
    static_assert(ss7.split<ss7.find('a')>() == std::make_pair(""_ss, "bracadabra"_ss), "");
    static_assert(ss7.split<ss7.find('a', 0, 3)>() == std::make_pair("abracad"_ss, "bra"_ss), "");
    static_assert(ss7.split<ss7.find('d')>() == std::make_pair("abraca"_ss, "abra"_ss), "");
    static_assert(ss7.split<ss7.find('b')>() == std::make_pair("a"_ss, "racadabra"_ss), "");
    static_assert(ss7.split<ss7.rfind('b')>() == std::make_pair("abracada"_ss, "ra"_ss), "");

    // static_string_hash() tests
    static_assert(static_string_hash("") == 5381ULL, "");
    static_assert(static_string_hash("Hello") == 210724412158ULL, "");
    static_assert(static_string_hash("HelloWorld") == 8246272427518117483ULL, "");
    static_assert(static_string_hash("HelloWorldHelloWorld") == 889607825945456465ULL, "");
    static_assert(static_string_hash(""_ss) == 5381ULL, "");
    static_assert(static_string_hash("Hello"_ss) == 210724412158ULL, "");
    static_assert(static_string_hash("HelloWorld"_ss) == 8246272427518117483ULL, "");
    static_assert(static_string_hash("HelloWorldHelloWorld"_ss) == 889607825945456465ULL, "");

    // ITOSS() tests
    static_assert(ITOSS(0) == "0", "");
    static_assert(ITOSS(1) == "1", "");
    static_assert(ITOSS(9) == "9", "");
    static_assert(ITOSS(10) == "10", "");
    static_assert(ITOSS(11) == "11", "");
    static_assert(ITOSS(14) == "14", "");
    static_assert(ITOSS(19) == "19", "");
    static_assert(ITOSS(99) == "99", "");
    static_assert(ITOSS(873) == "873", "");
    static_assert(ITOSS(496850) == "496850", "");
    static_assert(ITOSS(853104678) == "853104678", "");
    static_assert(ITOSS(2147483647) == "2147483647", "");
    static_assert(ITOSS(4294967295LL) == "4294967295", "");
    static_assert(ITOSS(827394274920LL) == "827394274920", "");
    static_assert(ITOSS(294653986395673LL) == "294653986395673", "");
    static_assert(ITOSS(973946584364859472LL) == "973946584364859472", "");
    static_assert(ITOSS(9223372036854775807LL) == "9223372036854775807", "");
    static_assert(ITOSS(std::numeric_limits<long long>::max()) == "9223372036854775807", "");
    static_assert(ITOSS(-1) == "-1", "");
    static_assert(ITOSS(-9) == "-9", "");
    static_assert(ITOSS(-10) == "-10", "");
    static_assert(ITOSS(-11) == "-11", "");
    static_assert(ITOSS(-14) == "-14", "");
    static_assert(ITOSS(-19) == "-19", "");
    static_assert(ITOSS(-99) == "-99", "");
    static_assert(ITOSS(-873) == "-873", "");
    static_assert(ITOSS(-496850) == "-496850", "");
    static_assert(ITOSS(-853104678) == "-853104678", "");
    static_assert(ITOSS(-2147483647) == "-2147483647", "");
    static_assert(ITOSS(-4294967295LL) == "-4294967295", "");
    static_assert(ITOSS(-827394274920LL) == "-827394274920", "");
    static_assert(ITOSS(-294653986395673LL) == "-294653986395673", "");
    static_assert(ITOSS(-973946584364859472LL) == "-973946584364859472", "");
    static_assert(ITOSS(-9223372036854775807LL) == "-9223372036854775807", "");
    static_assert(ITOSS(std::numeric_limits<long long>::min()) == "-9223372036854775808", "");

    // UTOSS() tests
    static_assert(UTOSS(0) == "0", "");
    static_assert(UTOSS(1) == "1", "");
    static_assert(UTOSS(9) == "9", "");
    static_assert(UTOSS(10) == "10", "");
    static_assert(UTOSS(11) == "11", "");
    static_assert(UTOSS(14) == "14", "");
    static_assert(UTOSS(19) == "19", "");
    static_assert(UTOSS(99) == "99", "");
    static_assert(UTOSS(873) == "873", "");
    static_assert(UTOSS(496850) == "496850", "");
    static_assert(UTOSS(853104678) == "853104678", "");
    static_assert(UTOSS(2147483647) == "2147483647", "");
    static_assert(UTOSS(4294967295ULL) == "4294967295", "");
    static_assert(UTOSS(827394274920ULL) == "827394274920", "");
    static_assert(UTOSS(294653986395673ULL) == "294653986395673", "");
    static_assert(UTOSS(973946584364859472ULL) == "973946584364859472", "");
    static_assert(UTOSS(9223372036854775807ULL) == "9223372036854775807", "");
    static_assert(UTOSS(18446744073709551615ULL) == "18446744073709551615", "");
    static_assert(UTOSS(std::numeric_limits<unsigned long long>::max()) == "18446744073709551615", "");

    // SSTOI() tests
    static_assert(SSTOI("") == 0, "");
    static_assert(SSTOI("0") == 0, "");
    static_assert(SSTOI("1") == 1, "");
    static_assert(SSTOI("9") == 9, "");
    static_assert(SSTOI("10") == 10, "");
    static_assert(SSTOI("11") == 11, "");
    static_assert(SSTOI("14") == 14, "");
    static_assert(SSTOI("19") == 19, "");
    static_assert(SSTOI("99") == 99, "");
    static_assert(SSTOI("873") == 873, "");
    static_assert(SSTOI("496850") == 496850, "");
    static_assert(SSTOI("853104678") == 853104678, "");
    static_assert(SSTOI("2147483647") == 2147483647, "");
    static_assert(SSTOI("4294967295") == 4294967295LL, "");
    static_assert(SSTOI("827394274920") == 827394274920LL, "");
    static_assert(SSTOI("294653986395673") == 294653986395673LL, "");
    static_assert(SSTOI("973946584364859472") == 973946584364859472LL, "");
    static_assert(SSTOI("9223372036854775807") == 9223372036854775807LL, "");
    static_assert(SSTOI("9223372036854775807") == std::numeric_limits<long long>::max(), "");
    static_assert(SSTOI("-1") == -1, "");
    static_assert(SSTOI("-9") == -9, "");
    static_assert(SSTOI("-10") == -10, "");
    static_assert(SSTOI("-11") == -11, "");
    static_assert(SSTOI("-14") == -14, "");
    static_assert(SSTOI("-19") == -19, "");
    static_assert(SSTOI("-99") == -99, "");
    static_assert(SSTOI("-873") == -873, "");
    static_assert(SSTOI("-496850") == -496850, "");
    static_assert(SSTOI("-853104678") == -853104678, "");
    static_assert(SSTOI("-2147483647") == -2147483647, "");
    static_assert(SSTOI("-4294967295") == -4294967295LL, "");
    static_assert(SSTOI("-827394274920") == -827394274920LL, "");
    static_assert(SSTOI("-294653986395673") == -294653986395673LL, "");
    static_assert(SSTOI("-973946584364859472") == -973946584364859472LL, "");
    static_assert(SSTOI("-9223372036854775807") == -9223372036854775807LL, "");
    static_assert(SSTOI("-9223372036854775808") == std::numeric_limits<long long>::min(), "");

    // SSTOU() tests
    static_assert(SSTOU("") == 0, "");
    static_assert(SSTOU("0") == 0, "");
    static_assert(SSTOI("1") == 1, "");
    static_assert(SSTOU("9") == 9, "");
    static_assert(SSTOU("10") == 10, "");
    static_assert(SSTOU("11") == 11, "");
    static_assert(SSTOU("14") == 14, "");
    static_assert(SSTOU("19") == 19, "");
    static_assert(SSTOU("99") == 99, "");
    static_assert(SSTOU("873") == 873, "");
    static_assert(SSTOU("496850") == 496850, "");
    static_assert(SSTOU("853104678") == 853104678, "");
    static_assert(SSTOU("2147483647") == 2147483647, "");
    static_assert(SSTOU("4294967295") == 4294967295ULL, "");
    static_assert(SSTOU("827394274920") == 827394274920ULL, "");
    static_assert(SSTOU("294653986395673") == 294653986395673ULL, "");
    static_assert(SSTOU("973946584364859472") == 973946584364859472ULL, "");
    static_assert(SSTOU("9223372036854775807") == 9223372036854775807ULL, "");
    static_assert(SSTOU("18446744073709551615") == 18446744073709551615ULL, "");
    static_assert(SSTOU("18446744073709551615") == std::numeric_limits<unsigned long long>::max(), "");

    // struct methods tests
    constexpr auto ss0 = ""_ss;
    static_assert(ss0.length() == 0, "");
    static_assert(ss0.size() == 1, "");
    static_assert(ss0.reverse() == "", "");
    static_assert(ss0.substring<0, 0>() == "", "");
    static_assert(ss0.prefix<0>() == "", "");
    static_assert(ss0.suffix<0>() == "", "");
    constexpr auto ss1 = "Hello"_ss;
    static_assert(ss1.length() == 5, "");
    static_assert(ss1.size() == 6, "");
    static_assert(ss1.reverse() == "olleH", "");
    static_assert(ss1.substring<0, 5>() == "Hello", "");
    static_assert(ss1.substring<3, 3>() == "", "");
    static_assert(ss1.substring<1, 5>() == "ello", "");
    static_assert(ss1.substring<0, 4>() == "Hell", "");
    static_assert(ss1.substring<2, 5>() == "llo", "");
    static_assert(ss1.substring<3, 4>() == "l", "");
    static_assert(ss1.substring<2, 4>() == "ll", "");
    static_assert(ss1.substring<1, 4>() == "ell", "");
    static_assert(ss1.prefix<0>() == "", "");
    static_assert(ss1.prefix<1>() == "H", "");
    static_assert(ss1.prefix<2>() == "He", "");
    static_assert(ss1.prefix<3>() == "Hel", "");
    static_assert(ss1.prefix<4>() == "Hell", "");
    static_assert(ss1.prefix<5>() == "Hello", "");
    static_assert(ss1.suffix<0>() == "Hello", "");
    static_assert(ss1.suffix<1>() == "ello", "");
    static_assert(ss1.suffix<2>() == "llo", "");
    static_assert(ss1.suffix<3>() == "lo", "");
    static_assert(ss1.suffix<4>() == "o", "");
    static_assert(ss1.suffix<5>() == "", "");
    constexpr auto ss2 = "abcabca"_ss;
    static_assert(ss2.find('a') == 0, "");
    static_assert(ss2.find('a', ss2.begin()) == 0, "");
    static_assert(ss2.find('a', ss2.end()) == static_string_npos, "");
    static_assert(ss2.find('a', 0) == 0, "");
    static_assert(ss2.find('a', 1) == 3, "");
    static_assert(ss2.find('a', 4) == 6, "");
    static_assert(ss2.find('a', 7) == static_string_npos, "");
    static_assert(ss2.find('a', 1'000'000) == static_string_npos, "");
    static_assert(ss2.find('a', ss2.begin(), 0) == 0, "");
    static_assert(ss2.find('a', ss2.begin(), 1) == 3, "");
    static_assert(ss2.find('a', ss2.begin(), 2) == 6, "");
    static_assert(ss2.find('a', ss2.begin(), 3) == static_string_npos, "");
    static_assert(ss2.find('a', ss2.begin(), 1'000'000) == static_string_npos, "");
    constexpr auto ss3 = "cabcabc"_ss;
    static_assert(ss3.rfind('c') == 6, "");
    static_assert(ss3.rfind('c', ss3.rbegin()) == 6, "");
    static_assert(ss3.rfind('c', ss3.rend()) == static_string_npos, "");
    static_assert(ss3.rfind('c', 6) == 6, "");
    static_assert(ss3.rfind('c', 5) == 3, "");
    static_assert(ss3.rfind('c', 2) == 0, "");
    static_assert(ss3.rfind('c', -1) == static_string_npos, "");
    static_assert(ss3.rfind('c', 1'000'000) == static_string_npos, "");
    static_assert(ss3.rfind('c', ss3.rbegin(), 0) == 6, "");
    static_assert(ss3.rfind('c', ss3.rbegin(), 1) == 3, "");
    static_assert(ss3.rfind('c', ss3.rbegin(), 2) == 0, "");
    static_assert(ss3.rfind('c', ss3.rbegin(), 3) == static_string_npos, "");
    static_assert(ss3.rfind('c', ss3.rbegin(), 1'000'000) == static_string_npos, "");
    static_assert(""_ss.hash() == 5381ULL, "");
    static_assert("Hello"_ss.hash() == 210724412158ULL, "");
    static_assert("HelloWorld"_ss.hash() == 8246272427518117483ULL, "");
    static_assert("HelloWorldHelloWorld"_ss.hash() == 889607825945456465ULL, "");
    static_assert(ss3[0] == 'c', "");
    static_assert(ss3[1] == 'a', "");
    static_assert(ss3[2] == 'b', "");
    static_assert(ss3[3] == 'c', "");
    static_assert(ss3[4] == 'a', "");
    static_assert(ss3[5] == 'b', "");
    static_assert(ss3[6] == 'c', "");
    static_assert(ss3[7] == '\0', "");
    constexpr auto ss4 = "ccbacdbacdbacdbdacbdacdacbdacdcbdadcabacbadcbdacdabcdabcdabdc"_ss;
    static_assert(ss4.count('a') == 15, "");
    static_assert(ss4.count('b') == 13, "");
    static_assert(ss4.count('c') == 17, "");
    static_assert(ss4.count('d') == 16, "");
    static_assert(ss4.count('a') + ss4.count('b') + ss4.count('c') + ss4.count('d') == ss4.length(), "");
    static_assert(ss2.starts_with(""), "");
    static_assert(ss2.starts_with("a"), "");
    static_assert(ss2.starts_with("ab"), "");
    static_assert(ss2.starts_with("abc"), "");
    static_assert(ss2.starts_with("abca"), "");
    static_assert(ss2.starts_with("abcab"), "");
    static_assert(ss2.starts_with("abcabc"), "");
    static_assert(ss2.starts_with("abcabca"), "");
    static_assert(!ss2.starts_with("abcabcab"), "");
    static_assert(!ss2.starts_with("bcabca"), "");
    static_assert(!ss2.starts_with("acabca"), "");
    static_assert(!ss2.starts_with("abcaba"), "");
    static_assert(ss2.starts_with(""_ss), "");
    static_assert(ss2.starts_with("a"_ss), "");
    static_assert(ss2.starts_with("ab"_ss), "");
    static_assert(ss2.starts_with("abc"_ss), "");
    static_assert(ss2.starts_with("abca"_ss), "");
    static_assert(ss2.starts_with("abcab"_ss), "");
    static_assert(ss2.starts_with("abcabc"_ss), "");
    static_assert(ss2.starts_with("abcabca"_ss), "");
    static_assert(!ss2.starts_with("abcabcab"_ss), "");
    static_assert(!ss2.starts_with("bcabca"_ss), "");
    static_assert(!ss2.starts_with("acabca"_ss), "");
    static_assert(!ss2.starts_with("abcaba"_ss), "");
    static_assert(ss2.ends_with(""), "");
    static_assert(ss2.ends_with("a"), "");
    static_assert(ss2.ends_with("ca"), "");
    static_assert(ss2.ends_with("bca"), "");
    static_assert(ss2.ends_with("abca"), "");
    static_assert(ss2.ends_with("cabca"), "");
    static_assert(ss2.ends_with("bcabca"), "");
    static_assert(ss2.ends_with("abcabca"), "");
    static_assert(!ss2.ends_with("babcabca"), "");
    static_assert(!ss2.ends_with("abcabc"), "");
    static_assert(!ss2.ends_with("abcaba"), "");
    static_assert(!ss2.ends_with("acabca"), "");
    static_assert(ss2.ends_with(""_ss), "");
    static_assert(ss2.ends_with("a"_ss), "");
    static_assert(ss2.ends_with("ca"_ss), "");
    static_assert(ss2.ends_with("bca"_ss), "");
    static_assert(ss2.ends_with("abca"_ss), "");
    static_assert(ss2.ends_with("cabca"_ss), "");
    static_assert(ss2.ends_with("bcabca"_ss), "");
    static_assert(ss2.ends_with("abcabca"_ss), "");
    static_assert(!ss2.ends_with("babcabca"_ss), "");
    static_assert(!ss2.ends_with("abcabc"_ss), "");
    static_assert(!ss2.ends_with("abcaba"_ss), "");
    static_assert(!ss2.ends_with("acabca"_ss), "");
    constexpr auto sss4 = "bac"_ss;
    static_assert(ss4.find("bac") == 2, "");
    static_assert(ss4.find("bac", 3) == 6, "");
    static_assert(ss4.find("bac", 7) == 10, "");
    static_assert(ss4.find("bac", 11) == 37, "");
    static_assert(ss4.find("bac", 38) == static_string_npos, "");
    static_assert(ss4.find("bac", ss4.begin(), 1) == 6, "");
    static_assert(ss4.find("bac", ss4.begin(), 2) == 10, "");
    static_assert(ss4.find("bac", ss4.begin(), 3) == 37, "");
    static_assert(ss4.find("bac", ss4.begin(), 4) == static_string_npos, "");
    static_assert(ss4.find(sss4) == 2, "");
    static_assert(ss4.find(sss4, 3) == 6, "");
    static_assert(ss4.find(sss4, 7) == 10, "");
    static_assert(ss4.find(sss4, 11) == 37, "");
    static_assert(ss4.find(sss4, 38) == static_string_npos, "");
    static_assert(ss4.find(sss4, ss4.begin(), 1) == 6, "");
    static_assert(ss4.find(sss4, ss4.begin(), 2) == 10, "");
    static_assert(ss4.find(sss4, ss4.begin(), 3) == 37, "");
    static_assert(ss4.find(sss4, ss4.begin(), 4) == static_string_npos, "");
    static_assert(ss4.rfind("bac") == 37, "");
    static_assert(ss4.rfind("bac", 36) == 10, "");
    static_assert(ss4.rfind("bac", 9) == 6, "");
    static_assert(ss4.rfind("bac", 5) == 2, "");
    static_assert(ss4.rfind("bac", 1) == static_string_npos, "");
    static_assert(ss4.rfind("bac", ss4.rbegin() - 2, 1) == 10, "");
    static_assert(ss4.rfind("bac", ss4.rbegin() - 2, 2) == 6, "");
    static_assert(ss4.rfind("bac", ss4.rbegin() - 2, 3) == 2, "");
    static_assert(ss4.rfind("bac", ss4.rbegin() - 2, 4) == static_string_npos, "");
    static_assert(ss4.rfind(sss4) == 37, "");
    static_assert(ss4.rfind(sss4, 36) == 10, "");
    static_assert(ss4.rfind(sss4, 9) == 6, "");
    static_assert(ss4.rfind(sss4, 5) == 2, "");
    static_assert(ss4.rfind(sss4, 1) == static_string_npos, "");
    static_assert(ss4.rfind(sss4, ss4.rbegin() - sss4.rbegin(), 1) == 10, "");
    static_assert(ss4.rfind(sss4, ss4.rbegin() - sss4.rbegin(), 2) == 6, "");
    static_assert(ss4.rfind(sss4, ss4.rbegin() - sss4.rbegin(), 3) == 2, "");
    static_assert(ss4.rfind(sss4, ss4.rbegin() - sss4.rbegin(), 4) == static_string_npos, "");
    static_assert(ss3.contains('a'), "");
    static_assert(ss3.contains('b'), "");
    static_assert(ss3.contains('c'), "");
    static_assert(!ss3.contains('e'), "");
    static_assert(!ss3.contains('f'), "");
    static_assert(!ss3.contains('g'), "");
    static_assert(ss3.contains("cab"), "");
    static_assert(ss3.contains("bca"), "");
    static_assert(ss3.contains("abc"), "");
    static_assert(!ss3.contains("cba"), "");
    static_assert(!ss3.contains("aca"), "");
    static_assert(!ss3.contains("abb"), "");
    static_assert(ss3.contains("cabcabc"), "");
    static_assert(!ss3.contains("cabcabca"), "");
    static_assert(!ss3.contains("acabcabc"), "");

    // example #0
    std::cout << "Hello "_ss + "World!" << std::endl;

    // example #1
    constexpr wchar_t name[] = L"Andrew";
    constexpr auto str1 = static_wstring::concat(L"Hello, ", name, L"!");
    static_assert(str1 == L"Hello, Andrew!", "");
    std::wcout << str1 << std::endl;

    // example #2
    constexpr char country[] = "Great Britain";
    constexpr char captital[] = "London";
    constexpr auto str2 = static_string::concat(captital, " is a capital of ", country);
    static_assert(str2 == "London is a capital of Great Britain", "");
    std::cout << str2 << std::endl;

    // example #3
    constexpr int apples = 5;
    constexpr int oranges = 7;
    constexpr int fruits = apples + oranges;
    constexpr auto str3 = static_wstring::concat(L"I have ", ITOSW(apples), L" apples and ",
        ITOSW(oranges), L" oranges, so I have ", ITOSW(fruits), L" fruits");
    static_assert(str3 == L"I have 5 apples and 7 oranges, so I have 12 fruits", "");
    std::wcout << str3 << std::endl;

    // example #4
    constexpr auto sstr = static_string::concat("1 + 1 = ", ITOSS(1 + 1));
    constexpr auto sstr1 = static_string::concat(sstr, ", 2 + 2 = ", ITOSS(2 + 2));
    static_assert(sstr == "1 + 1 = 2", "");
    static_assert(sstr1 == "1 + 1 = 2, 2 + 2 = 4", "");
    std::string str = to_string(sstr1);
    std::cout << str << std::endl;

    // example #5
    constexpr auto sstr2 = "abcdefgh"_ss;
    for (size_t i = sstr2.begin(); i != sstr2.end(); ++i)
        std::cout << sstr2[i];
    std::cout << std::endl;
    for (size_t i = sstr2.rbegin(); i != sstr2.rend(); --i)
        std::cout << sstr2[i];
    std::cout << std::endl;

    return 0;
}
